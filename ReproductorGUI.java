
package audiolistener2;

import java.util.Scanner;

/**
 *
 * @author xpc
 */
public class ReproductorGUI extends javax.swing.JFrame {
    
    Scanner teclado = new Scanner(System.in);
    static Reproductor reproductor = Reproductor.getReproductor();
    static String ruta = "src\\audiolistener2\\AudioListener\\";
    static String nuevaRuta = "src\\audiolistener2"; // Proxima
    static long clipTiempo; // En que minuto o segundo va el audio cargado.
    static boolean isPlaying = true;
    static AudioListener audioListener;
    String nombre; // Proxima
            
            
            
    public ReproductorGUI() {
        initComponents();
        this.audioListener = new AudioListener(ruta);
        //this.nombre = null;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel1.setText("Audio:");

        jLabel2.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        jLabel2.setText("/.");

        pauseButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        pauseButton.setText("Pausar");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        stopButton.setText("Detener");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        playButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        playButton.setText("Reproducir");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel3.setText("|Reproductor de Musica|");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel3)
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(127, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReproductorGUI().setVisible(true);
            }
        });
    }
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if(isPlaying == true){
            clipTiempo = reproductor.clip.getMicrosecondPosition();
            reproductor.clip.stop();
            pauseButton.setText("Reanudar");
            isPlaying = false;
        }
        else{
            reproductor.clip.setMicrosecondPosition(clipTiempo);
            reproductor.clip.start();
            pauseButton.setText("Pausar");
            isPlaying = true;
        }
    }//GEN-LAST:event_pauseButtonActionPerformed


    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        reproductor.clip.setMicrosecondPosition(0);
        clipTiempo = 0;
        reproductor.clip.start();
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        reproductor.clip.stop();
        this.setVisible(false);
    }//GEN-LAST:event_stopButtonActionPerformed


    public void audiosMenu(){
        if(reproductor.clip.isActive()){
            System.out.println("[!].-Debe primero detener el audio actual antes de reproducir otro. (Boton de Detener)");
        }
        else{
            audioListener.muestreAudios();
            System.out.println("Digite el numero de la cancion que desea reproducir: ");
            int n = Integer.parseInt(teclado.nextLine())-1;
            Nodo audio = audioListener.getElement(n);
            String nombreAudio = audio.getDireccion();
            reproductor.cargueArchivo(ruta+nombreAudio);
            this.setVisible(true);
                }
    }
    
    public void menuPrincipal(){
        System.out.println("==========REPRODUCTOR DE MUSICA==========");
        System.out.println("[1].-Digite 1 para cargar las canciones de la playlist.\n"
                + "[2].-Digite 2 para reproducir  una cancion de la playlist.\n"
                + "[3].-Digite 3 para eliminar una de las canciones de la playlist.\n"
                + "[4].-Digite 4 para editar una las canciones de la playlist.\n"
                + "[5].-Digite 5 para mostrar alfabeticamente las canciones de la playlist.\n"
                + "[6].-Digite 6 para copiar la playlist en otra carpeta.\n"
                + "[7].-Digite 7 para salir.\n"
        );
    }
    public void leaOpcion(int opcion){
        switch(opcion){
            case 1: //Carga las canciones
                audioListener.cargueArchivos();
                reproductor.cargueArchivo(ruta+audioListener.getElement(0)); // Carga una cancion por defaul para poder inicializar el Clip.
                break;
            case 2: // Despliega el menu de canciones en la playlist.
                if (audioListener.getSize() == 0) {
                    System.out.println("No hay canciones cargadas en la playlist, por favor, cargue al menos una cancion (Opcion 1)");
                }
                else
                    audiosMenu();
                break;
            case 3: //Eliminar una cancion.
                break;
            case 4:// Editar una cancion.
                break;
            case 5: //Mostrar canciones.
                break;
            case 6: //Copar playlist.
                break;
            case 7: //Cerrar programa.
                System.out.println("¡Hasta la proxima!\n"
                        + "Cerrando programa..."
                        + "\nPrograma finalizado.");
                break;
                    
                
                
                
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
