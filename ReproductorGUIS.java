

package audiolistener2;


import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Scanner;
/**
 * Clase principal del proyecto, contiene los metodos de menus, la programacion de los eventos de cada buton de la interfaz
 * Ademas de los metodos para eliminar y editar, asi como los metodos para interpretar las opciones dadas por el usuario.
 * @author xpc
 */
public class ReproductorGUIS extends javax.swing.JFrame {

    Scanner teclado = new Scanner(System.in);
    static Reproductor reproductor = Reproductor.getReproductor();
    static String ruta = "src\\audiolistener2\\AudioListener\\";
    static String nuevaRuta = "src\\audiolistener2\\"; // Proxima
    static long clipTiempo; // En que minuto o segundo va el audio cargado.
    static boolean isPlaying = true;
    static AudioListener audioListener;
    String carpetaNombre;
    boolean cargada = false;
    /**
     * Constructor de la clase ReproductorGUIS.
     */
    public ReproductorGUIS() {
        initComponents();
        this.audioListener = new AudioListener(ruta);
        this.carpetaNombre = null;
    }
    /**
     * Metodo que le asigna un nombre a la variable de instancia carpetaNombre, diferente de nulo.
     * @param nombreCarpeta nombre de la carpeta.
     */
    public void setCarpetaNombre(String nombreCarpeta){
        this.carpetaNombre = nombreCarpeta;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        audioText = new javax.swing.JLabel();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel1.setText("|Reproductor de Musica|");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel2.setText("Audio:");

        audioText.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        audioText.setText("/.");

        pauseButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        pauseButton.setText("Pausar");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        stopButton.setText("Detener");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        playButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        playButton.setText("Reproducir");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(79, 79, 79)
                        .addComponent(audioText, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(audioText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Metodo que crea una carpeta segundo el nombre dado, si es que, la carpeta no existe ya antes.
     * @param nombreCarpeta Nombre que va a llevar la carpeta.
     */
    public void creeCarpeta(String nombreCarpeta){
        String dir = nuevaRuta+nombreCarpeta;
        Path path = Paths.get(dir);
        if(Files.exists(path) == false){
            try{
                Files.createDirectory(path);
                System.out.println("Carpeta creada en " + dir);
            }catch(IOException e){
                e.printStackTrace();
                System.out.println("[!].-Error");
            }
        }
    }
    /**
     * Metodo que copia un archivo por medio de la direccion en la que se encuentra el archivo y la direccion en donde se va copiar ese archivo.
     * @param fuente lugar en disco duro en donde se encuentra el archivo.
     * @param destino lugar en disco duro en donde se copiara el archivo.
     */
    public void copieArchivo(String fuente, String destino){
        try{
            Path origenP = Paths.get(fuente);
            Path destinoP = Paths.get(destino);
            Files.copy(origenP,destinoP, StandardCopyOption.REPLACE_EXISTING);
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e){
            e.printStackTrace();
        }
    }
    /**
     * Metodo que copia archivos por medio de la direccion de Disco Duro que tiene cada Nodo de la lista circular.
     */
    public void copieArchivos(){
        Nodo iterator = this.audioListener.getElement(0);
        String fuente;
        String destino;
        String audioDir;     
            while(iterator.next != this.audioListener.lista.inicio){ //Mientras no sea el ultimo elemento
                audioDir = iterator.getDireccion();
                fuente = ruta+""+audioDir;
                destino = nuevaRuta+""+this.carpetaNombre+"\\"+audioDir;
                copieArchivo(fuente,destino);
                iterator = iterator.getNext();
            }
            audioDir = iterator.getDireccion();
            fuente = ruta+""+audioDir;
            destino = nuevaRuta+""+this.carpetaNombre+"\\"+audioDir;
            copieArchivo(fuente,destino);
            System.out.println("[*].-¡Copia de archivos realizada con exito!");
    }
    
    /**
     * Metodo para editar un audio.
     */
    public void editeAudio(){
        this.audioListener.lista.muestreLista();
        System.out.println("Digite el numero de la cancion que desea editar.\nOpcion:");
        int resp = Integer.parseInt(teclado.nextLine())-1;
        Nodo elemento = this.audioListener.getElement(resp);
        System.out.println("Digite el nuevo nombre de la cancion.");
        String nuevoNombre = teclado.nextLine();
        this.audioListener.editeElemento(elemento, nuevoNombre);
        System.out.println("[!].-¡Cancion editata con exito!");
    }
    /**
     * Metodo para eliminar un audio.
     */
    public void elimineAudio(){
        this.audioListener.lista.muestreLista();
        System.out.println("Digite el numero de la cancion que desea eliminar\nOpcion:");
        int n = Integer.parseInt(teclado.nextLine())-1;
        this.audioListener.elimineElemento(n);
        System.out.println("[!].-¡Cancion editata con exito!");
    }
    /**
     * Boton de pausar una cancion
     * @param evt evento de darle al boton 'Pausar' o 'Detener'
     */
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if(isPlaying == true){
            clipTiempo = reproductor.clip.getMicrosecondPosition();
            reproductor.clip.stop();
            pauseButton.setText("Reanudar");
            isPlaying = false;
        }
        else{
            reproductor.clip.setMicrosecondPosition(clipTiempo);
            reproductor.clip.start();
            pauseButton.setText("Pausar");
            isPlaying = true;
        }             
    }//GEN-LAST:event_pauseButtonActionPerformed
    /**
     * Boton de detener una cancion
     * @param evt evento de darle al boton 'Detener'
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        reproductor.clip.stop();
        this.setVisible(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Boton de reproducir una cancion
     * @param evt evento de darle al boton 'Reproducir'
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        reproductor.clip.setMicrosecondPosition(0);
        clipTiempo = 0;
        reproductor.clip.start();
        
    }//GEN-LAST:event_playButtonActionPerformed
    /**
     * Metodo que despliega el menu para seleccionar una cancion a escuchar.
     * Si existe ya una cancion sonando, esta debe de ser detenida antes de seleccionar otra cancion.
     */
    public void audiosMenu(){
        if(reproductor.clip.isActive()){
            System.out.println("[!].-Debe primero detener el audio actual antes de reproducir otro. (Boton de Detener)");
        }
        else{
            audioListener.muestreAudios();
            System.out.println("Digite el numero de la cancion que desea reproducir: ");
            int n = Integer.parseInt(teclado.nextLine())-1;
            Nodo audio = audioListener.getElement(n);
            String nombreAudio = audio.getDireccion();
            reproductor.cargueArchivo(ruta+nombreAudio);
            this.setVisible(true);
            audioText.setText(nombreAudio);
                } 
    }
    
    
    /**
     * Metodo que despliega en la consola el menu principal de opciones.
     */
    public void menuPrincipal(){
        System.out.println("==========REPRODUCTOR DE MUSICA==========");
        System.out.println("[1].-Digite 1 para cargar las canciones de la playlist.\n"
                + "[2].-Digite 2 para reproducir  una cancion de la playlist.\n"
                + "[3].-Digite 3 para eliminar una de las canciones de la playlist.\n"
                + "[4].-Digite 4 para editar una las canciones de la playlist.\n"
                + "[5].-Digite 5 para mostrar alfabeticamente las canciones de la playlist.\n"
                + "[6].-Digite 6 para copiar la playlist en otra carpeta.\n"
                + "[7].-Digite 7 para salir.\n"
        );
    }
    
    /**
     * Metodo que lee la opcion proporcionada por el usuario.
     * @param opcion numero de opcion
     */
    public void leaOpcion(int opcion){
        switch(opcion){
            case 1: //Carga las canciones
                if(!cargada){
                    audioListener.cargueArchivos();
                    reproductor.cargueArchivo(ruta+audioListener.getElement(0)); // Carga una cancion por defaul para poder inicializar el Clip.
                    cargada = true;
                    
                }
                else{
                    System.out.println("[!].-La lista ya fue cargada.");
                }
                break;
            case 2: // Despliega el menu de canciones en la playlist.
                if (audioListener.getSize() == 0) {
                    System.out.println("No hay canciones cargadas en la playlist, por favor, cargue al menos una cancion (Opcion 1)");
                }
                else
                    audiosMenu();
                break;
            case 3: //Eliminar una cancion.
                    if (this.audioListener.lista.esVacia()) 
                        System.out.println("[!].-Debe primero cargar una playlist. ( Opcion 1 )");
                    else
                        elimineAudio();
                break;
            case 4:// Editar una cancion.
                if (this.audioListener.lista.esVacia()) 
                    System.out.println("[!].-Debe primero cargar una playlist. ( Opcion 1 )");
                else
                    editeAudio();
                break;
            case 5: //Mostrar canciones.
                if (this.audioListener.lista.esVacia()) 
                    System.out.println("[!].-Debe primero cargar una playlist. ( Opcion 1 )");
                else
                    this.audioListener.lista.muestreLista();
                break;
            case 6: 
                if (this.audioListener.lista.esVacia()) 
                    System.out.println("[!].-Debe primero cargar una playlist. ( Opcion 1 )");
                
                else{
                    creeCarpeta(this.carpetaNombre);
                    copieArchivos();
                }
               
                break;
            case 7: //Cerrar programa.
                System.out.println("¡Hasta la proxima!\n"
                        + "Cerrando programa..."
                        + "\nPrograma finalizado.");
                break;
        }
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReproductorGUIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReproductorGUIS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel audioText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
